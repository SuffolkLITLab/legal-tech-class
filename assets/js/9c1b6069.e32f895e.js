"use strict";(self.webpackChunkopen_class=self.webpackChunkopen_class||[]).push([[2223],{4011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>r});var s=t(4848),o=t(8453);const a={slug:"logic",title:"Logic",sidebar_label:"Logic"},i=void 0,l={id:"classes/docacon-2020/logic",title:"Logic",description:"Introducing logic",source:"@site/docs/classes/docacon-2020/logic.md",sourceDirName:"classes/docacon-2020",slug:"/classes/docacon-2020/logic",permalink:"/legal-tech-class/docs/classes/docacon-2020/logic",draft:!1,unlisted:!1,editUrl:"https://github.com/suffolklitlab/legal-tech-class/edit/master/class/docs/classes/docacon-2020/logic.md",tags:[],version:"current",frontMatter:{slug:"logic",title:"Logic",sidebar_label:"Logic"},sidebar:"someSidebar",previous:{title:"Hello, World",permalink:"/legal-tech-class/docs/classes/docacon-2020/hello-world"},next:{title:"Working with Docx",permalink:"/legal-tech-class/docs/classes/docacon-2020/working-with-docx"}},c={},r=[{value:"Introducing logic",id:"introducing-logic",level:3},{value:"What happened",id:"what-happened",level:4},{value:"An advanced exploration",id:"an-advanced-exploration",level:3},{value:"A universal approach",id:"a-universal-approach",level:4},{value:"What to take away from this advanced example",id:"what-to-take-away-from-this-advanced-example",level:4},{value:"Your assignment",id:"your-assignment",level:2}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"introducing-logic",children:"Introducing logic"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes you want to answer a question with some logic rather than directly\nasking the user for information."}),"\n",(0,s.jsxs)(n.p,{children:["Docassemble uses ",(0,s.jsx)(n.a,{href:"/legal-tech-class/docs/python",children:"Python"}),", a powerful but easy to read programming\nlanguage to control logic inside an interview. Python statements go inside a\n",(0,s.jsx)(n.code,{children:"code"})," block."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'---\ncode: |\n  # This is a comment. notice that we assign a value with =, and we test a value with ==\n  if user_name == "Scotty":\n    secret_message = "Beam Me Up, Scotty"\n  else:\n    secret_message = "No message to report."\n---    \nquestion: |\n  Hello, ${user_name}\nsubquestion: |\n  ${secret_message}\nmandatory: True\n---\nquestion: |\n  What is your name?\nfields:\n  - Name: user_name\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"Note",type:"info",children:(0,s.jsxs)(n.p,{children:["Both ",(0,s.jsx)(n.a,{href:"/legal-tech-class/docs/yaml",children:"YAML"})," and Python are picky about indentation. If you run into an\nerror, check to make sure each line is indented the same way as the example\nabove."]})}),"\n",(0,s.jsxs)(n.p,{children:["In the example above, we introduced the use of the ",(0,s.jsx)(n.code,{children:"|"})," line continuation marker,\nor vertical pipe. We always use this when the text that follows could go on\nmultiple lines, and to handle special characters (like accented letters). You\nalso always use it for a ",(0,s.jsx)(n.code,{children:"code"})," block."]}),"\n",(0,s.jsxs)(n.p,{children:["We also introduced the ",(0,s.jsx)(n.code,{children:"subquestion"})," specifier. ",(0,s.jsx)(n.code,{children:"subquestion"})," is used for longer\nexplanation text on a screen. It uses a smaller font that is not bold."]}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes you don't want to use logic to create a new variable. You can use\nsimple Python code right inside a ",(0,s.jsx)(n.code,{children:"question"})," or ",(0,s.jsx)(n.code,{children:"subquestion"})," block, although the\nsyntax is very slightly different."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"---  \nquestion: Hello, ${user_name}\nsubquestion: |\n  % if user_name == 'Spock':\n  Live long and prosper.\n  % endif\nmandatory: True\n---\nquestion: What is your name?\nfields:\n  - Name: user_name\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Notice that inside a ",(0,s.jsx)(n.code,{children:"question"})," block, the line with the ",(0,s.jsx)(n.code,{children:"if"})," statement starts\nwith ",(0,s.jsx)(n.code,{children:"%"}),". We also need to use an ",(0,s.jsx)(n.code,{children:"endif"})," statement, instead of using indentation\nto show the beginning and end of the ",(0,s.jsx)(n.code,{children:"if"})," statement."]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:["About the ",(0,s.jsx)(n.code,{children:"%"})," symbol in Mako"]}),(0,s.jsxs)(n.p,{children:["The ``%` symbol has a special meaning in ",(0,s.jsx)(n.a,{href:"/legal-tech-class/docs/mako",children:"Mako"}),". It\nlets you use Python syntax at the start and end of a block, usually\nto control conditional text. It is very handy when you have a large block\nof text that you want to show or hide, especially if the block has formatting\nor also contains variables."]}),(0,s.jsxs)(n.p,{children:["In comparison, the ",(0,s.jsx)(n.code,{children:"${ }"})," we've already been using lets us\nput much shorter bits of Python code in the middle of a block of text."]}),(0,s.jsxs)(n.p,{children:["Inside the text of a question or subquestion, use the ",(0,s.jsx)(n.code,{children:"%"})," symbol when the Python\ncode or conditional logic you are using is meant to control the next line or lines of content."]})]}),"\n",(0,s.jsxs)(n.p,{children:["Python allows us to go a little further than using just if-then. We can introduce\nmultiple branches using ",(0,s.jsx)(n.code,{children:"elif"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'---\ncode: |\n  # This is a comment. notice that we assign a value with =, and we test a value with ==\n  if user_name == "Scotty":\n    secret_message = "Beam Me Up, Scotty"\n  elif user_name == "Bones":\n    secret_message = "Dammit Jim!"\n  else:\n    secret_message = "No message to report."\n---    \nquestion: |\n  Hello, ${user_name}\nsubquestion: |\n  ${secret_message}\nmandatory: True\n---\nquestion: |\n  What is your name?\nfields:\n  - Name: user_name\n'})}),"\n",(0,s.jsx)(n.p,{children:'Note: once a condition is satisfied in an if-then block of logic, Python\nmoves on and stops the evaluation process. What do you think the result\nof this would be if the user puts "Bones" as their name?'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'---\ncode: |\n  # This is a comment. notice that we assign a value with =, and we test a value with ==\n  if user_name == "Scotty":\n    secret_message = "Beam Me Up, Scotty"\n  elif user_name == "Bones":\n    secret_message = "Dammit Jim!"\n  elif user_name == "Bones":\n    secret_message = "Here is the antidote!"\n  else:\n    secret_message = "No message to report."\n---    \nquestion: |\n  Hello, ${user_name}\nsubquestion: |\n  ${secret_message}\nmandatory: True\n---\nquestion: |\n  What is your name?\nfields:\n  - Name: user_name\n'})}),"\n",(0,s.jsx)(n.h4,{id:"what-happened",children:"What happened"}),"\n",(0,s.jsx)(n.p,{children:'The "Dammit Jim!" version of the secret message gets displayed because it is the first\nversion of the test that matched. One the Python interpreter hits the first matching line,\nit stops checking to see if any other test matches.'}),"\n",(0,s.jsx)(n.h3,{id:"an-advanced-exploration",children:"An advanced exploration"}),"\n",(0,s.jsxs)(n.p,{children:["In the logic exercise above, notice that the comparison between the user name\nand the name we want to check for is ",(0,s.jsx)(n.strong,{children:"case sensitive"}),'. That means if we check\nfor the name "Scotty" and the user types "scotty" we won\'t get a match.']}),"\n",(0,s.jsx)(n.p,{children:"We can solve it by adding more checks, like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'code: |\n  if user_name == "Scotty" or user_name == "scotty":\n    secret_message = "Beam Me Up, Scotty"\n'})}),"\n",(0,s.jsx)(n.p,{children:'But what if we want to match "sCotty" and "SCotty", in case the user accidentally\nholds the shift key at the wrong time? The one-by-one matching approach gets out\nof hand pretty quickly.'}),"\n",(0,s.jsxs)(n.p,{children:["Note that what we explore below is an ",(0,s.jsx)(n.strong,{children:"advanced"})," concept. You can get pretty far with\nthe building blocks we already explored. The advantage of Docassemble is that ",(0,s.jsx)(n.strong,{children:"we can"}),"\nuse these advanced solutions. So let's see what that might look like."]}),"\n",(0,s.jsx)(n.h4,{id:"a-universal-approach",children:"A universal approach"}),"\n",(0,s.jsx)(n.p,{children:"When faced with this problem, someone with a computer science mindset will\nthink about how to make all of the different possible capitalizations of\nthe names equivalent to each other."}),"\n",(0,s.jsx)(n.p,{children:"Luckily, there is a built-in way to do this in Python. It involves a few new concepts:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["We can transform the value of variables in Python by using ",(0,s.jsx)(n.code,{children:"functions"})," and ",(0,s.jsx)(n.code,{children:"methods"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Python has a ",(0,s.jsx)(n.strong,{children:"lot"})," of built-in functions and methods. We usually don't have to create\na new one for basic tasks."]}),"\n",(0,s.jsx)(n.li,{children:"We can transform a copy of a value without destroying the original."}),"\n",(0,s.jsxs)(n.li,{children:["We use ",(0,s.jsx)(n.code,{children:"functions"})," by wrapping them around a variable, like ",(0,s.jsx)(n.code,{children:"function_name(variable_name)"}),".\nMethods are similar, but we use them by adding a ",(0,s.jsx)(n.code,{children:"."})," to the end of the variable name, instead,\nlike ",(0,s.jsx)(n.code,{children:"variable.method_name()"}),". The reason for the difference isn't critical right now."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Pause for a minute and reflect on this question:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:'What is the "universal" version of the name "Scotty"?'}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You likely came up with one of three answers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Scotty"}),"\n",(0,s.jsx)(n.li,{children:"scotty"}),"\n",(0,s.jsx)(n.li,{children:"SCOTTY"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Suppose we change the ",(0,s.jsx)(n.code,{children:"user_name"}),' variable\'s capitalization to one of these three forms, regardless of the\noriginal capitalization of the variable. Then we can compare it to the exact string we know it should\nmatch, "Scotty", "scotty" or "SCOTTY".']}),"\n",(0,s.jsxs)(n.p,{children:["How do we change the capitalization of the ",(0,s.jsx)(n.code,{children:"user_name"})," variable?"]}),"\n",(0,s.jsxs)(n.p,{children:["Python has handy built-in ",(0,s.jsx)(n.code,{children:"methods"})," that let us transform text. Here are two likely\ncandidates:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.w3schools.com/python/ref_string_lower.asp",children:".lower()"}),", which makes text all lowercase."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.w3schools.com/python/ref_string_upper.asp",children:".upper()"}),", which makes text all uppercase."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:'We can eliminate the idea of comparing it to the version with an initial capital letter\n("Scotty"). While we could achieve it, notice that it would just add an extra step. We\'d need\nto make everything lowercase first before changing the capitalization of the first letter.'}),"\n",(0,s.jsxs)(n.p,{children:["Here's how we use the ",(0,s.jsx)(n.code,{children:".lower()"})," and ",(0,s.jsx)(n.code,{children:".upper()"})," methods:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"user_name.lower()"})," applies the ",(0,s.jsx)(n.code,{children:".lower()"})," method to the text and ",(0,s.jsx)(n.code,{children:"returns"})," a lowercase\nversion of the text. It doesn't change the value that is stored in ",(0,s.jsx)(n.code,{children:"user_name"})," permanently."]}),"\n",(0,s.jsxs)(n.p,{children:["We can change our comparison to use this ",(0,s.jsx)(n.code,{children:"method"}),", like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'code: |\n  if user_name.lower() == "scotty":\n    secret_message = "Beam Me Up, Scotty"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We would follow the same pattern to use the ",(0,s.jsx)(n.code,{children:".upper()"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'code: |\n  if user_name.upper() == "SCOTTY":\n    secret_message = "Beam Me Up, Scotty"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Most programmers will choose the lowercase method first. But it's just habit. Either\nmethod would work fine."}),"\n",(0,s.jsxs)(n.p,{children:['Suppose we really wanted to try comparing to "Scotty", despite the extra steps it requires.\nWe can do that by chaining the ',(0,s.jsx)(n.code,{children:".lower()"})," method with the ",(0,s.jsx)(n.code,{children:".capitalize()"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'code: |\n  if user_name.lower().capitalize() == "Scotty":\n    secret_message = "Beam Me Up, Scotty"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"what-to-take-away-from-this-advanced-example",children:"What to take away from this advanced example"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Logic in Docassemble can take advantage of the full Python programming language"}),"\n",(0,s.jsx)(n.li,{children:"Python is full of many helpful building blocks. You can look outside of the\nDocassemble documentation to find them."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We've introduced a lot of new concepts here. But you will be able to do a lot\nof the Python code in your Docassemble interview by copying and pasting and making\nsmall changes to other working examples. Don't worry about understanding the full\npower of the Python language or memorizing the whole library of available functions\nand methods."}),"\n",(0,s.jsx)(n.h2,{id:"your-assignment",children:"Your assignment"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Modify the Logic exercise so that a new secret message is displayed when a\nname of your choice is displayed."}),"\n",(0,s.jsxs)(n.li,{children:["Make all of the secret messages work regardless of how the user\ncapitalizes their name. Apply the example that we used to check for upper and lowercase\nversions of ",(0,s.jsx)(n.code,{children:"scotty"})," to the other conditions."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Quinten Steenhuis, June 2020"})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const o={},a=s.createContext(o);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);