"use strict";(self.webpackChunkopen_class=self.webpackChunkopen_class||[]).push([[69],{9509:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=i(4848),s=i(8453);const o={slug:"controlling-interview-order",title:"Controlling Interview Order",sidebar_label:"Controlling Interview Order"},r=void 0,a={id:"practical-guide-docassemble/controlling-interview-order",title:"Controlling Interview Order",description:"The interview as a question library",source:"@site/docs/practical-guide-docassemble/controlling-interview-order.md",sourceDirName:"practical-guide-docassemble",slug:"/practical-guide-docassemble/controlling-interview-order",permalink:"/legal-tech-class/docs/practical-guide-docassemble/controlling-interview-order",draft:!1,unlisted:!1,editUrl:"https://github.com/suffolklitlab/legal-tech-class/edit/master/class/docs/practical-guide-docassemble/controlling-interview-order.md",tags:[],version:"current",frontMatter:{slug:"controlling-interview-order",title:"Controlling Interview Order",sidebar_label:"Controlling Interview Order"},sidebar:"someSidebar",previous:{title:"Working with Docx",permalink:"/legal-tech-class/docs/classes/docacon-2020/working-with-docx"},next:{title:"Basic Troubleshooting",permalink:"/legal-tech-class/docs/practical-guide-docassemble/basic-troubleshooting"}},d={},l=[{value:"The interview as a question library",id:"the-interview-as-a-question-library",level:2},{value:"What happened?",id:"what-happened",level:3},{value:"Who&#39;s the boss? Why you should use only one mandatory block",id:"whos-the-boss-why-you-should-use-only-one-mandatory-block",level:2},{value:"What happened?",id:"what-happened-1",level:3},{value:"The interview order block",id:"the-interview-order-block",level:2},{value:"How the block is run",id:"how-the-block-is-run",level:3},{value:"You cannot trigger a block with <code>id</code>",id:"you-cannot-trigger-a-block-with-id",level:3},{value:"<code>event</code> does not do what you think",id:"event-does-not-do-what-you-think",level:3},{value:"How the interview order block differs from HotDocs&#39; INTERVIEW computation",id:"how-the-interview-order-block-differs-from-hotdocs-interview-computation",level:3},{value:"Triggering a screen for a variable that is already defined",id:"triggering-a-screen-for-a-variable-that-is-already-defined",level:3},{value:"Forcing docassemble to re-ask a defined variable",id:"forcing-docassemble-to-re-ask-a-defined-variable",level:4},{value:"The <strong>default</strong> pattern",id:"the-default-pattern",level:4},{value:"The &quot;existing or new&quot; pattern",id:"the-existing-or-new-pattern",level:4},{value:"Displaying a link to allow the user to edit a value",id:"displaying-a-link-to-allow-the-user-to-edit-a-value",level:4},{value:"Avoid setting variables in the interview order block",id:"avoid-setting-variables-in-the-interview-order-block",level:3},{value:"Triggering a question and then continuing: using <code>continue button field</code>",id:"triggering-a-question-and-then-continuing-using-continue-button-field",level:3},{value:"Triggering code and then continuing: using &quot;named&quot; blocks",id:"triggering-code-and-then-continuing-using-named-blocks",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"the-interview-as-a-question-library",children:"The interview as a question library"}),"\n",(0,t.jsxs)(n.p,{children:["You can think of a docassemble interview as a library of questions.\nThe only questions that docassemble will ask are those that are triggered,\neither by a ",(0,t.jsx)(n.code,{children:"mandatory"})," block or in some other way."]}),"\n",(0,t.jsx)(n.p,{children:"Docassemble will scan the interview file until it finds a question\nthat contains the answer to every field that is required by any\nmandatory block. If a field isn't used in the mandatory block, or a\nblock that the mandatory block itself triggers, it will never be shown\nto the user."}),"\n",(0,t.jsx)(n.p,{children:"Copy and paste the interview below into your playground."}),"\n",(0,t.jsx)(n.p,{children:"Before you run it, make a prediction."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Which questions will be asked?"}),"\n",(0,t.jsx)(n.li,{children:"Which question will be asked first? What will be the order of the remaining questions?"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nquestion: |\n  What is the average airspeed velocity of an unladen swallow?\nfields:\n  - no label: air_speed\n---\nquestion: |\n  What is your quest?\nfields:\n  - no label: quest\n---\nquestion: |\n  What is your name?\nfields:\n  - First name: first_name\n  - Last name: last_name\n---\nmandatory: True\nquestion: |\n  Hello, ${ first_name }\nsubquestion: |\n  You said the swallow's speed is ${ air_speed }\n\n  Your first name is ${ first_name }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"what-happened",children:"What happened?"}),"\n",(0,t.jsxs)(n.p,{children:["Docassemble only asks the ",(0,t.jsx)(n.code,{children:"air_speed"})," and ",(0,t.jsx)(n.code,{children:"first_name"})," questions. The ",(0,t.jsx)(n.code,{children:"quest"}),"\nquestion wasn't used by any mandatory blocks in this interview, so it\nwas never asked."]}),"\n",(0,t.jsxs)(n.p,{children:["The first question that is asked is the ",(0,t.jsx)(n.code,{children:"first_name"})," question. This is because\nthe one ",(0,t.jsx)(n.code,{children:"mandatory"})," block mentions the ",(0,t.jsx)(n.code,{children:"first_name"})," field before it mentions any\nother fields."]}),"\n",(0,t.jsx)(n.p,{children:"As you can imagine, the incidental order of fields on your final screen doesn't always\ndictate the most logical or pleasant order for questions in a lengthy interview.\nThere are other ways to control the order of questions in a more fine-grained way."}),"\n",(0,t.jsx)(n.h2,{id:"whos-the-boss-why-you-should-use-only-one-mandatory-block",children:"Who's the boss? Why you should use only one mandatory block"}),"\n",(0,t.jsxs)(n.p,{children:["There are a lot of ways to ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/logic.html",children:"control the\norder"})," of questions in a docassemble\ninterview. For example: you can use a ",(0,t.jsx)(n.code,{children:"mandatory"})," modifier on many questions,\nand the ",(0,t.jsx)(n.code,{children:"if"})," modifier to handle optional questions. Alternatively, you can\nuse the ",(0,t.jsx)(n.code,{children:"need"})," modifier on multiple individual blocks."]}),"\n",(0,t.jsxs)(n.p,{children:["It's a good habit to use only ",(0,t.jsx)(n.strong,{children:"one"})," mandatory block in your interview."]}),"\n",(0,t.jsx)(n.p,{children:"Using one mandatory block can allow you to:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Visualize and trace your interview logic in one place"}),"\n",(0,t.jsx)(n.li,{children:"Better understand which code will end up executing and which will not"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Copy and paste the interview below into your playground. Before you run it,\nmake a prediction."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"What will be the last screen that is shown to the user?"}),"\n",(0,t.jsx)(n.li,{children:"What action will happen when the interview is complete?"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'---\nmandatory: True\nquestion: |\n  Please answer our intake questionnaire\ncontinue button field: introduction\n---\nmandatory: True\nquestion: |\n  Tell us your name\nfields:\n  - First name: user_first_name\n  - Last name: user_last_name\n---\nmandatory: True\nquestion: |\n  How old are you?\nfields:\n  - birthdate: birthday\n    datatype: date\n---\nmandatory: True\nquestion: |\n  Results\nsubquestion: |\n  Thank you, ${user_first_name}.\n  \n  We will send your results to Dewey, Cheatem and Howe.\n---\ntemplate: email_contents\ncontent: |\n  Here is the intake\n  \n  First name: ${ user_first_name }  \n  Last name: ${ user_last_name }\n\n  Birthdate: ${birthday}\n---\nmandatory: True\ncode: |\n  send_email(to="dewey@example.com", template=email_contents)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"what-happened-1",children:"What happened?"}),"\n",(0,t.jsx)(n.p,{children:'Mandatory blocks are read from "top to bottom" of the interview file.'}),"\n",(0,t.jsx)(n.p,{children:'In the interview above, all of the blocks are mandatory. But the code block\nthat sends an email will never run. Why? It can only run after the last screen\nis shown. But docassemble pauses on the "results" screen indefinitely.'}),"\n",(0,t.jsx)(n.h2,{id:"the-interview-order-block",children:"The interview order block"}),"\n",(0,t.jsx)(n.p,{children:'I often call the code block that I use to control question order the "interview order" block.\nThere is no official name for it; in HotDocs and its predecessors, this would be called the\nINTERVIEW computation. Here\'s an example interview order block:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: interview order\nmandatory: True\ncode: |\n  intro_screen\n  user.name.first\n  if user_type == 'attorney':\n    attorney_instructions\n  else:\n    prose_instructions\n  user.address.address\n  download\n"})}),"\n",(0,t.jsx)(n.h3,{id:"how-the-block-is-run",children:"How the block is run"}),"\n",(0,t.jsxs)(n.p,{children:["Docassemble runs this code block from top to bottom, seeking the definition of\neach variable listed in the code block in order. Each ",(0,t.jsx)(n.strong,{children:"undefined"})," variable\ntriggers an exception (",(0,t.jsx)(n.code,{children:"NameError"}),", ",(0,t.jsx)(n.code,{children:"AttributeError"})," or ",(0,t.jsx)(n.code,{children:"KeyError"}),") which\nDocassemble intercepts, running code or asking a question that can define that\nvariable. ",(0,t.jsx)(n.strong,{children:"Docassemble will then run the interview order block again"})," from top\nto bottom until it reaches the next undefined variable."]}),"\n",(0,t.jsx)(n.p,{children:"Understanding that the code block might run multiple times is important! Use\nthis as a place to list variables as a reference and do simple branching logic.\nDon't use it to set any variables or call an API that might be triggered\nmultiple times."}),"\n",(0,t.jsxs)(n.h3,{id:"you-cannot-trigger-a-block-with-id",children:["You cannot trigger a block with ",(0,t.jsx)(n.code,{children:"id"})]}),"\n",(0,t.jsxs)(n.p,{children:["Another common pattern new Docassemble developers try is to trigger a specific\nblock in the interview order block by referencing the block's ",(0,t.jsx)(n.code,{children:"id"})," or by\nadding an ",(0,t.jsx)(n.code,{children:"event"})," modifier to the block."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"id"})," of a block is information for you, the developer, and gets used by\nanalytics tools as well. It is not used to trigger a block."]}),"\n",(0,t.jsxs)(n.h3,{id:"event-does-not-do-what-you-think",children:[(0,t.jsx)(n.code,{children:"event"})," does not do what you think"]}),"\n",(0,t.jsxs)(n.p,{children:["A new developer might try using an\n",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/questions.html#event",children:(0,t.jsx)(n.code,{children:"event"})})," modifier to trigger\na block. An ",(0,t.jsx)(n.code,{children:"event"})," ",(0,t.jsx)(n.strong,{children:"generally"})," does not save or persist any variables that are\nset during it. You should not attach an ",(0,t.jsx)(n.code,{children:"event"})," modifier to a block of code that\nyou want to trigger in an ",(0,t.jsx)(n.code,{children:"interview order"})," block. Reserve it for ending\nquestions, not to label code you want to run."]}),"\n",(0,t.jsxs)(n.p,{children:["The other place that ",(0,t.jsx)(n.code,{children:"event"})," is used is with the Docassemble ",(0,t.jsx)(n.code,{children:"actions"})," system."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Event"}),"s linked to actions that ",(0,t.jsx)(n.strong,{children:"do"})," permanently alter an interview's state\ncan be triggered by an ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/api.html#session_action",children:"external\noccurrence"}),", ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html#url_action",children:"clicking a\nbutton"}),", or be used by\n",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/background.html#background",children:"background code"}),".\nDon't try to use an ",(0,t.jsx)(n.code,{children:"event"})," to trigger code in the main flow of an interview."]}),"\n",(0,t.jsx)(n.h3,{id:"how-the-interview-order-block-differs-from-hotdocs-interview-computation",children:"How the interview order block differs from HotDocs' INTERVIEW computation"}),"\n",(0,t.jsxs)(n.p,{children:["Remember, Docassemble is goal seeking. It doesn't care what screens the user has\nseen: it tries to define all of the variables that you mark as ",(0,t.jsx)(n.code,{children:"mandatory"})," that\nit can reach."]}),"\n",(0,t.jsx)(n.p,{children:"Unlike in HotDocs, listing a variable that is already defined will not trigger\nanything being displayed. Docassemble only displays something or tries running\ncode if the variable triggers a Python exception."}),"\n",(0,t.jsxs)(n.p,{children:["A common mistake when a developer is getting used to Docassemble's built-in\n",(0,t.jsx)(n.code,{children:"Individual"})," and ",(0,t.jsx)(n.code,{children:"Address"})," classes is to list an object in the interview order\nblock. The developer may not realize that the ",(0,t.jsx)(n.code,{children:"name"})," and ",(0,t.jsx)(n.code,{children:"address"})," attributes of\nan Individual are themselves objects and that they get pre-initialized."]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"objects:\n  - user: Individual\n---\nid: interview order\nmandatory: True\ncode: |\n  user.name\n  user.address\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The short interview above will trigger the objects block in lines 1-2, and\nnothing else visible will happen. This is because the ",(0,t.jsx)(n.code,{children:"name"})," and the ",(0,t.jsx)(n.code,{children:"address"}),"\nattributes of the ",(0,t.jsx)(n.code,{children:"user"})," object are created instantly when the ",(0,t.jsx)(n.code,{children:"objects"})," block\nis run (by the ",(0,t.jsx)(n.code,{children:"__init__"})," class constructor of ",(0,t.jsx)(n.code,{children:"Individual"}),"). If you want to\ntrigger a question, you need to trigger an attribute that is not defined yet,\neither by a question, code, or a class constructor."]}),"\n",(0,t.jsx)(n.p,{children:"Here is a version of the above interview that probably matches the developer's\nintent:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"objects:\n  - user: Individual\n---\nid: interview order\nmandatory: True\ncode: |\n  user.name.first\n  user.address.address\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"name.first"})," and ",(0,t.jsx)(n.code,{children:"address.address"})," attributes are not defined yet.\nMentioning them will cause an ",(0,t.jsx)(n.code,{children:"AttributeError"})," exception and lead\nDocassemble to seeking a question or code block to define them."]}),"\n",(0,t.jsxs)(n.p,{children:["Another way that the ",(0,t.jsx)(n.code,{children:"interview order"})," block differs from HotDocs\nis that you might find that other variables are triggered that you did not\nexplicitly list. Remember, Docassemble is seeking to satisfy all of the\nvariables you list in order. If your question or code block in turn\ndepends on another variable, that will be triggered along with the\nvariable you explicitly list."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"objects:\n  - user: Individual\n---\nid: interview order\nmandatory: True\ncode: |\n  user.address.address\n  user.name.first\n---\nid: user's address\nquestion: |\n  What is the address of ${ user }?\nfields:\n  - Street address: user.address.address\n  - City: user.address.city\n---\nid: user's name\nquestion: |\n  What is your name?\nfields:\n  - First: user.name.first\n  - Last: user.name.last\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In the example above, triggering ",(0,t.jsx)(n.code,{children:"user.address.address"})," will run the\n",(0,t.jsx)(n.code,{children:"id: user's name"})," block before asking for the user's address.\nThat is because the user's name is displayed on the ",(0,t.jsx)(n.code,{children:"id: user's address"}),"\nblock."]}),"\n",(0,t.jsx)(n.h3,{id:"triggering-a-screen-for-a-variable-that-is-already-defined",children:"Triggering a screen for a variable that is already defined"}),"\n",(0,t.jsx)(n.h4,{id:"forcing-docassemble-to-re-ask-a-defined-variable",children:"Forcing docassemble to re-ask a defined variable"}),"\n",(0,t.jsx)(n.p,{children:"One pattern you might encounter is that a variable is pre-defined (maybe by an API)\nbut you still want the user to have a chance to review and edit the value."}),"\n",(0,t.jsx)(n.p,{children:"You can do that a few different ways:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html#invalidate",children:(0,t.jsx)(n.code,{children:"invalidate()"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html#force_ask",children:(0,t.jsx)(n.code,{children:"force_ask()"})})}),"\n",(0,t.jsxs)(n.li,{children:["Creating a ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#review",children:"review screen"})]}),"\n",(0,t.jsxs)(n.li,{children:["Using ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/functions.html#url_action",children:(0,t.jsx)(n.code,{children:"url_action()"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"invalidate()"})," will tell Docassemble the variable is not defined without erasing the\nvalue it has. This has the effect of allowing you to revisit a question."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"force_ask()"})," has a similar effect in most circumstances, but offers much more\ncomplex options to trigger a series of follow-up questions."]}),"\n",(0,t.jsxs)(n.p,{children:["Think carefully about how you use this pattern. You can avoid it\nif the API is used to provide defaults. Using ",(0,t.jsx)(n.code,{children:"invalidate()"})," or\n",(0,t.jsx)(n.code,{children:"force_ask()"})," in the interview order block is also risky, as it may\nrun more than one time. Try the ",(0,t.jsx)(n.code,{children:"named block"})," pattern below to\ncontain any ",(0,t.jsx)(n.code,{children:"force_ask()"})," or ",(0,t.jsx)(n.code,{children:"invalidate()"})," code and ensure it\nonly runs one time."]}),"\n",(0,t.jsxs)(n.h4,{id:"the-default-pattern",children:["The ",(0,t.jsx)(n.strong,{children:"default"})," pattern"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nid: interview order\nmandatory: True\ncode: |\n  address_default\n  user.address.address\n---\ncode: |\n  address_default = run_some_api()\n---\nquestion: |\n  What is your address?\nsubquestion: |\n  We set the default value based on an API result.\nfields:\n  - Address: user.address.address\n    default: address_default\n"})}),"\n",(0,t.jsxs)(n.p,{children:['This very simple pattern just displays the API-generated results as a\nplaceholder. This pattern is nice because the user gets to see the value and\nchange it. The potentially "wrong" value is never stored in the ',(0,t.jsx)(n.code,{children:"Address"}),"\nobject."]}),"\n",(0,t.jsx)(n.h4,{id:"the-existing-or-new-pattern",children:'The "existing or new" pattern'}),"\n",(0,t.jsxs)(n.p,{children:["Another pattern you could try is allowing the user to choose from existing\nvalues or to define a new one. ",(0,t.jsx)(n.code,{children:"object_radio"})," combined with ",(0,t.jsx)(n.code,{children:"disable others"})," is\na good way to do this. This pattern works well with API results."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'---\nobjects:\n  user: Individual\n---\nid: interview order\nmandatory: True\ncode: |\n  address_default_object\n  user.address.address\n  display_results\n---\ncode: |\n  # You could use a function or API call that returns an Address object instead of directly initializing the object\n  address_default_object = Address(address="123 Main St", city="Boston")\n---\nquestion: |\n  What is your address?\nfields:\n  - An existing address: user.address\n    datatype: object_radio\n    none of the above: True\n    choices:\n      - address_default_object\n    disable others: True\n  - Address: user.address.address\n  - City: user.address.city\n  - State: user.address.state\n    code: states_list()\n---\nevent: display_results\nquestion: |\n  ${ user.address.block() }\n'})}),"\n",(0,t.jsxs)(n.p,{children:['In the interview snippet above, the Address/City/State fields can only be\ninteracted with if the "Existing address" field has been left set to ',(0,t.jsx)(n.code,{children:"None of the above"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"displaying-a-link-to-allow-the-user-to-edit-a-value",children:"Displaying a link to allow the user to edit a value"}),"\n",(0,t.jsxs)(n.p,{children:["One safe option is to display a link to edit a variable on an arbitrary screen\nwith ",(0,t.jsx)(n.code,{children:"url_action()"}),". Here is an example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"question: |\n  Verify your court\nsubquestion: |\n  Based on the information you gave us, it looks like\n  you belong in ${ trial_court }.\n\n  [Edit court](${ url_action('trial_court') })\ncontinue button field: inform_about_court\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you want to review multiple fields at once, use the\n",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#review",children:"review screen"})," pattern.\nReview screens will automatically update to display only variables that\nhave a value, which is handy. They can be displayed in-line or when the\nuser clicks a link."]}),"\n",(0,t.jsx)(n.h3,{id:"avoid-setting-variables-in-the-interview-order-block",children:"Avoid setting variables in the interview order block"}),"\n",(0,t.jsx)(n.p,{children:"You might be tempted to treat the interview order block like a script in an\nimperative programming language. This would be incorrect. Docassemble is\ndeclarative. The interview order block should list a set of goals. Setting variables\nin the interview order block can:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Lead to infinite loops (you can avoid this by using the modifier ",(0,t.jsx)(n.code,{children:"scan for variables: False"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Lead to variables definition being changed unexpectedly and in a hard to\ntrace way."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'Yet sometimes you do want to trigger code. Do that by using a "named block".'}),"\n",(0,t.jsxs)(n.h3,{id:"triggering-a-question-and-then-continuing-using-continue-button-field",children:["Triggering a question and then continuing: using ",(0,t.jsx)(n.code,{children:"continue button field"})]}),"\n",(0,t.jsxs)(n.p,{children:["Docassemble does have a way for you to invoke a screen more explicitly. When you\nadd a ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/fields.html#continue%20button%20field",children:(0,t.jsx)(n.code,{children:"continue button field"})})," to\na question block, you give the block a variable name. You can mention that\nvariable name in your interview order block."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"id: interview order\nmandatory: True\ncode: |\n  intro_screen\n  user.name.first\n---\nid: introduction\ncontinue button field: intro_screen\nquestion: |\n  Welcome to our interview\nsubquestion: |\n  Before you start, follow these steps:\n\n  1. Step 1\n  2. Step 2\n  3. Step 3\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Usually you should ",(0,t.jsx)(n.strong,{children:"only"})," give a ",(0,t.jsx)(n.code,{children:"continue button field"})," to a screen\nthat doesn't ask any questions. Avoid using it to simulate HotDocs's\ndialog-based interview order. You can run into harder to trace logic."]}),"\n",(0,t.jsx)(n.h3,{id:"triggering-code-and-then-continuing-using-named-blocks",children:'Triggering code and then continuing: using "named" blocks'}),"\n",(0,t.jsx)(n.p,{children:"Named block is a term that I use that is not in the Docassemble documentation,\nbut is a very handy concept."}),"\n",(0,t.jsx)(n.p,{children:"Here is a short example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"objects:\n  - user: Individual\n---\nid: interview order\nmandatory: True\ncode: |\n  user.name.first\n  get_api_results\n  user.address.address\n---\ncode: |\n  user.address.address = run_some_api()\n  get_api_results = True\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Notice that in our interview order block, we referenced a variable named\n",(0,t.jsx)(n.code,{children:"get_api_results"}),'. This is the "named block." This variable gets defined at the\n',(0,t.jsx)(n.strong,{children:"end"})," of our code block. Because it is not defined until the end of the code\nblock, Docassemble needs to run the whole code block to define it."]}),"\n",(0,t.jsxs)(n.p,{children:["This is roughly equivalent to a computation in HotDocs, but note that this code\nblock will only run once. When the interview order block is run again,\n",(0,t.jsx)(n.code,{children:"get_api_results"})," will already be defined. There is no need for Docassemble\nto run it again."]}),"\n",(0,t.jsxs)(n.p,{children:["What if you ",(0,t.jsx)(n.strong,{children:"do"})," want it to run multiple times? You can use the ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/logic.html#depends%20on",children:(0,t.jsx)(n.code,{children:"depends on"})})," modifier to specify\nconditions that will cause Docassemble to recalculate the ",(0,t.jsx)(n.code,{children:"get_api_results"}),"\ndefinition. More bluntly, you can use\n",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/logic.html#reconsider",children:(0,t.jsx)(n.code,{children:"reconsider"})})," to run the\ncode block each time the screen is refreshed. It is usually best to avoid\n",(0,t.jsx)(n.code,{children:"reconsider"})," if there is a different tool that works because overusing it can\ngreatly slow down Docassemble's operation and sometimes lead to unintended\nbehavior. ",(0,t.jsx)(n.code,{children:"depends on"})," also serves a dual purpose of allowing you to explain\nyour code's purpose to the next developer to come along and read your interview."]}),"\n",(0,t.jsx)(n.h1,{id:"learn-more",children:"Learn more"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Docassemble Documentation: ",(0,t.jsx)(n.a,{href:"https://docassemble.org/docs/logic.html",children:"Logic"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Quinten Steenhuis, February 2021"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);