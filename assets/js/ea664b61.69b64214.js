"use strict";(self.webpackChunkopen_class=self.webpackChunkopen_class||[]).push([[2e3],{8662:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=n(4848),t=n(8453),a=n(6025);const o={id:"2020-law-smart-machines-assignment-1",slug:"2020-law-smart-machines-assignment-1",title:"Assignment 1",sidebar_label:"Assignment 1"},l=void 0,r={id:"classes/smart-machines/2020/2020-law-smart-machines-assignment-1",title:"Assignment 1",description:"Before you get started",source:"@site/docs/classes/smart-machines/2020/2020-law-smart-machines-assignment-1.md",sourceDirName:"classes/smart-machines/2020",slug:"/classes/smart-machines/2020/2020-law-smart-machines-assignment-1",permalink:"/legal-tech-class/docs/classes/smart-machines/2020/2020-law-smart-machines-assignment-1",draft:!1,unlisted:!1,editUrl:"https://github.com/suffolklitlab/legal-tech-class/edit/master/class/docs/classes/smart-machines/2020/2020-law-smart-machines-assignment-1.md",tags:[],version:"current",sidebarPosition:2020,frontMatter:{id:"2020-law-smart-machines-assignment-1",slug:"2020-law-smart-machines-assignment-1",title:"Assignment 1",sidebar_label:"Assignment 1"},sidebar:"someSidebar",previous:{title:"Project Ideas",permalink:"/legal-tech-class/docs/classes/smart-machines/2020/project-ideas"},next:{title:"Assignment 2",permalink:"/legal-tech-class/docs/classes/smart-machines/2020/2020-law-smart-machines-assignment-2"}},c={},d=[{value:"Before you get started",id:"before-you-get-started",level:2},{value:"Introduction to the Docassemble Playground",id:"introduction-to-the-docassemble-playground",level:2},{value:"Hello, World",id:"hello-world",level:2},{value:"Baby steps",id:"baby-steps",level:3},{value:"The mandatory specifier",id:"the-mandatory-specifier",level:3},{value:"Introducing variables",id:"introducing-variables",level:3},{value:"Introducing logic",id:"introducing-logic",level:3},{value:"Your assignment",id:"your-assignment",level:2},{value:"Turning in your work",id:"turning-in-your-work",level:2}];function h(e){const s={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"before-you-get-started",children:"Before you get started"}),"\n",(0,i.jsxs)(s.p,{children:["We will discuss the first few sections of this assignment in class. To refresh your memory and reflect on your own, I recommend skimming the Overview of Docassemble, Description of ",(0,i.jsx)(s.a,{href:"/legal-tech-class/docs/yaml",children:"YAML"}),", and the section describing ",(0,i.jsx)(s.a,{href:"/legal-tech-class/docs/mako",children:"Mako"}),". If you run into any trouble, please ask for help on the class Slack channel."]}),"\n",(0,i.jsx)(s.h2,{id:"introduction-to-the-docassemble-playground",children:"Introduction to the Docassemble Playground"}),"\n",(0,i.jsxs)(s.p,{children:["We will use the Docassemble playground for all exercises. Log in to the Docassemble server at ",(0,i.jsx)(s.a,{href:"https://interviews.lemmalegal.com",children:"https://interviews.lemmalegal.com"}),". When you are loggged in, click on your name, and then select the Playground option to reach the Playground."]}),"\n",(0,i.jsx)("img",{alt:"Overview of the Docassemble Playground",src:(0,a.Ay)("img/playground_window.png")}),"\n",(0,i.jsx)(s.p,{children:"The Playground is made up of several elements."}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"The main text editing window"}),"\n",(0,i.jsx)(s.li,{children:"A list of example blocks that can be directly inserted into the text editing window"}),"\n",(0,i.jsx)(s.li,{children:"A list of variables and functions available in the current interview file"}),"\n",(0,i.jsx)(s.li,{children:"The save and run button, used to run the interview and view results."}),"\n",(0,i.jsx)(s.li,{children:"The share button which also gives you a link that can be shared"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"hello-world",children:"Hello, World"}),"\n",(0,i.jsxs)(s.p,{children:["In computer programming, the ",(0,i.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program",children:"traditional first exercise"}),' in a new programming language is to display the text "Hello, World."']}),"\n",(0,i.jsx)(s.h3,{id:"baby-steps",children:"Baby steps"}),"\n",(0,i.jsx)(s.p,{children:"Let's erase the text in the playground and replace it with the text below:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:"question: Hello, World\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Docassemble interviews contain a series of ",(0,i.jsx)(s.code,{children:"specifiers"})," followed by text, such as the ",(0,i.jsx)(s.code,{children:"question"})," specifier. The ",(0,i.jsx)(s.code,{children:"question"})," specifier tells docassemble that what follows will be the title of a screen displayed to the user."]}),"\n",(0,i.jsx)(s.p,{children:"When you save and then run this sample, you will notice an error."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"Error\nDocassemble has finished executing all code blocks marked as initial or mandatory, and finished asking all questions marked as mandatory (if any). It is a best practice to end your interview with a question that says goodbye and offers an Exit button.\n"})}),"\n",(0,i.jsx)(s.h3,{id:"the-mandatory-specifier",children:"The mandatory specifier"}),"\n",(0,i.jsxs)(s.p,{children:["Take a minute to read the error message. In Docassemble, your interview can contain many questions and branches that are never shown to the user. This error is telling us that ",(0,i.jsx)(s.em,{children:"none"})," of the questions are marked as ",(0,i.jsx)(s.code,{children:"mandatory"}),", or required, so Docassemble doesn't know what to display. Let's fix that."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:"question: Hello, World\nmandatory: True\n"})}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"mandatory"}),' specifier marks this block as required. Now when we run the interview, we\'ll see the text "Hello, World" on the screen without any errors.']}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Note"}),": you should normally have only ONE ",(0,i.jsx)(s.code,{children:"mandatory"})," block in a single interview. We'll discuss good practices around this later."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"introducing-variables",children:"Introducing variables"}),"\n",(0,i.jsx)(s.p,{children:"The purpose of Docassemble is to gather information from the users. Let's ask the user's name so we can greet them personally."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:"question: Hello, ${user_name}\nmandatory: True\n---\nquestion: What is your name?\nfields:\n  - Name: user_name\n"})}),"\n",(0,i.jsxs)(s.p,{children:["We introduced several new ideas in this interview. Notice that each screen in the interview is separated by three dashes, like this: ",(0,i.jsx)(s.code,{children:"---"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["We introduced a new ",(0,i.jsx)(s.code,{children:"specifier"}),", ",(0,i.jsx)(s.code,{children:"fields"}),". Instead of single line of text, this ",(0,i.jsx)(s.code,{children:"specifier"})," takes a list. Each field in the list is indented and begins with a single dash, like this: ",(0,i.jsx)(s.code,{children:"-"}),". Each item has a label, followed by a colon, followed by the name of the variable that the user's input will be assigned to."]}),"\n",(0,i.jsxs)(s.p,{children:["To learn more about the format of a Docassemble interview, read the section on the ",(0,i.jsx)(s.a,{href:"/legal-tech-class/docs/yaml",children:"YAML format"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["We also introduced ",(0,i.jsx)(s.code,{children:"variables"}),". A variable is simply a placeholder. ",(0,i.jsx)(s.code,{children:"user_name"})," is a variable that is a placeholder for the user's name. Inside the Docassemble interview, we can display a variable by surrounding it with ",(0,i.jsx)(s.code,{children:"Mako"})," tags, like this: ",(0,i.jsx)(s.code,{children:"${variable_name}"}),"."]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Note"}),": We don't need to tell Docassemble to mark the second question as mandatory. Because the mandatory question requires the variable ",(0,i.jsx)(s.code,{children:"user_name"}),", Docassemble automatically asks the first question that provides a definition."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"introducing-logic",children:"Introducing logic"}),"\n",(0,i.jsxs)(s.p,{children:["Docassemble uses ",(0,i.jsx)(s.a,{href:"/legal-tech-class/docs/mako",children:"Mako"})," tags to control displaying variables and basic logic inside the interview file. Let's try out using an ",(0,i.jsx)(s.code,{children:"if"})," statement: the most basic building block of logic."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:"question: Hello, ${user_name}\nsubquestion: |\n  % if user_name == 'Bob':\n  My uncle's name is Bob too!\n  % endif\nmandatory: True\n---\nquestion: What is your name?\nfields:\n  - Name: user_name\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In this iteration, we introduce the ",(0,i.jsx)(s.code,{children:"line continuation"})," marker, ",(0,i.jsx)(s.code,{children:"|"}),". This allows us to have more than one line of text in a row that is part of the same field. Text that follows the ",(0,i.jsx)(s.code,{children:"line continuation"})," marker is always indented. Usually, we use two spaces as indentation."]}),"\n",(0,i.jsxs)(s.p,{children:["We also introduce the ",(0,i.jsx)(s.code,{children:"subquestion"})," specifier. A ",(0,i.jsx)(s.code,{children:"subquestion"})," is displayed in a smaller font than the main ",(0,i.jsx)(s.code,{children:"question"})," text."]}),"\n",(0,i.jsxs)(s.p,{children:["A ",(0,i.jsx)(s.code,{children:"Mako"})," ",(0,i.jsx)(s.code,{children:"if"})," statement is written on its own line. Notice that the line ",(0,i.jsx)(s.em,{children:"must"})," end in a ",(0,i.jsx)(s.code,{children:":"}),". Also notice that when we check the value of a variable, we need to use a double ",(0,i.jsx)(s.code,{children:"=="}),", not ",(0,i.jsx)(s.code,{children:"="}),". We also need to tell Docassemble when the optional text ends and the main text starts back up with the ",(0,i.jsx)(s.code,{children:"endif"})," keyword."]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Note"}),":  ",(0,i.jsx)(s.a,{href:"/legal-tech-class/docs/yaml",children:"YAML"})," is picky about indentation. If you run into an error, check to make sure each line is indented the same way as the example above."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"your-assignment",children:"Your assignment"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"Modify the Hello, World exercise so that it ask for the user's first and last names separately."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"turning-in-your-work",children:"Turning in your work"}),"\n",(0,i.jsx)(s.p,{children:'Please use the course Blackboard to turn in your work this week. I would like you to provide me a link so that I can run your interview, and a copy of the interview code. To obtain the link, use the green "Share" button. Right-click and Copy link. Use the "Download" button to download a copy of your YAML. Turn both of these in by 5:30 PM on Wednesday.'})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var i=n(6540);const t={},a=i.createContext(t);function o(e){const s=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:s},e.children)}}}]);