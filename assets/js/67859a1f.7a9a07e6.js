"use strict";(self.webpackChunkopen_class=self.webpackChunkopen_class||[]).push([[538],{4924:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=s(5893),t=s(1151);const i={slug:"question-types",title:"Question Types",sidebar_label:"Question Types"},a=void 0,l={id:"classes/docacon-2020/question-types",title:"Question Types",description:"So far we've only looked at one type of question - single text. Docassemble",source:"@site/docs/classes/docacon-2020/question-types.md",sourceDirName:"classes/docacon-2020",slug:"/classes/docacon-2020/question-types",permalink:"/legal-tech-class/docs/classes/docacon-2020/question-types",draft:!1,unlisted:!1,editUrl:"https://github.com/suffolklitlab/legal-tech-class/edit/master/class/docs/classes/docacon-2020/question-types.md",tags:[],version:"current",frontMatter:{slug:"question-types",title:"Question Types",sidebar_label:"Question Types"},sidebar:"someSidebar",previous:{title:"Logic",permalink:"/legal-tech-class/docs/classes/docacon-2020/logic"},next:{title:"Customizing Appearance",permalink:"/legal-tech-class/docs/classes/docacon-2020/customizing-appearance"}},r={},c=[{value:"The example block is your friend",id:"the-example-block-is-your-friend",level:2},{value:"Using multiple fields in the same question",id:"using-multiple-fields-in-the-same-question",level:3},{value:"Restricting the user to a specific type of answer",id:"restricting-the-user-to-a-specific-type-of-answer",level:3},{value:"Creating true-false questions",id:"creating-true-false-questions",level:3},{value:"Multiple choice questions",id:"multiple-choice-questions",level:3},{value:"Showing the user more than one screen",id:"showing-the-user-more-than-one-screen",level:3},{value:"It&#39;s not enough to add another <code>mandatory</code> block",id:"its-not-enough-to-add-another-mandatory-block",level:4},{value:"Adding an invisible field to get Docassemble to display a <code>continue</code> button",id:"adding-an-invisible-field-to-get-docassemble-to-display-a-continue-button",level:4},{value:"Using an &quot;interview order&quot; <code>code</code> block instead",id:"using-an-interview-order-code-block-instead",level:4},{value:"Learn more",id:"learn-more",level:4},{value:"Your assignment",id:"your-assignment",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"So far we've only looked at one type of question - single text. Docassemble\ncomes pre-loaded with many different question types that give you options\non how to ask users for information, as well as how to present options to\nyour users."}),"\n",(0,o.jsx)(n.h2,{id:"the-example-block-is-your-friend",children:"The example block is your friend"}),"\n",(0,o.jsxs)(n.p,{children:["At the bottom of the Playground there's a segment called ",(0,o.jsx)(n.code,{children:"Example blocks"}),".\nThis many examples of common structures and methods used in creating\nDocassemble interviews, and is the best reference guide for starting out,\nand even if you've been using Docassemble for a while."]}),"\n",(0,o.jsx)(n.h3,{id:"using-multiple-fields-in-the-same-question",children:"Using multiple fields in the same question"}),"\n",(0,o.jsx)(n.p,{children:"What if we want to ask the user for multiple pieces of information using only\na single question?"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"question: |\n  What are your favorite things to eat?\nsubquestion: |\n  Please be specific.\nfields:\n  - Vegetable: fav_veggie\n  - Fruit: fav_fruit\n  - Mineral: fav_mineral\n"})}),"\n",(0,o.jsx)(n.h3,{id:"restricting-the-user-to-a-specific-type-of-answer",children:"Restricting the user to a specific type of answer"}),"\n",(0,o.jsxs)(n.p,{children:["What if we want the user to only answer with a number, a date, or an email address?\nUse the ",(0,o.jsx)(n.code,{children:"datatype"})," specifier:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"question: |\n  Please answer my questions:\nsubquestion: |\n  Please be specific.\nfields:\n  - Dollar value: big_bucks\n    datatype: currency\n  - Favorite round number: big_number\n    datatype: integer\n  - Favorite decimal number: deci_number\n    datatype: number\n  - Your birthday: user_bday\n    datatype: date\n  - Your email: user_email\n    datatype: email\n"})}),"\n",(0,o.jsx)(n.h3,{id:"creating-true-false-questions",children:"Creating true-false questions"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"yesno"})," question type is an easy way to have users set a\nvariable to true or false:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"question: |\n  Are you at least 18 years of age?\nyesno: over_eighteen\n"})}),"\n",(0,o.jsx)(n.h3,{id:"multiple-choice-questions",children:"Multiple choice questions"}),"\n",(0,o.jsx)(n.p,{children:"Docassemble gives you different ways to present multiple choice questions."}),"\n",(0,o.jsx)(n.p,{children:"Radio buttons:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"question: |\n  What type of shoes do you wear?\nfield: target_variable\nchoices:\n  - Sneakers\n  - Sandals\n  - Clogs\n  - Other\n"})}),"\n",(0,o.jsx)(n.p,{children:"Dropdown:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"question: |\n  What type of shoes do you wear?\nfield: target_variable\ndropdown:\n  - Sneakers\n  - Sandals\n  - Clogs\n  - Other\n"})}),"\n",(0,o.jsx)(n.p,{children:"Combobox:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"question: |\n  What is your favorite color?\nfields:\n  - Color: favorite_color\n    input type: combobox\n    choices: \n      - Red\n      - Green\n      - Purple\n"})}),"\n",(0,o.jsx)(n.h3,{id:"showing-the-user-more-than-one-screen",children:"Showing the user more than one screen"}),"\n",(0,o.jsx)(n.p,{children:"If you would like the user to see more than one screen in your interview,\nyou need to:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Make sure the screen is itself ",(0,o.jsx)(n.code,{children:"mandatory"})," or required by a ",(0,o.jsx)(n.code,{children:"mandatory"})," block"]}),"\n",(0,o.jsxs)(n.li,{children:["Make sure that the user can ",(0,o.jsx)(n.strong,{children:"reach"})," the screen (that is, it's not blocked by another screen)"]}),"\n"]}),"\n",(0,o.jsxs)(n.h4,{id:"its-not-enough-to-add-another-mandatory-block",children:["It's not enough to add another ",(0,o.jsx)(n.code,{children:"mandatory"})," block"]}),"\n",(0,o.jsxs)(n.p,{children:["In the ",(0,o.jsx)(n.a,{href:"/legal-tech-class/docs/classes/docacon-2020/hello-world",children:"Hello, World"})," exercise, we used a single ",(0,o.jsx)(n.code,{children:"mandatory: True"}),"\non the final screen of the interview. If we want to display another screen after the\n",(0,o.jsx)(n.code,{children:"mandatory: True"})," screen, our first guess might be to add another block with ",(0,o.jsx)(n.code,{children:"mandatory: True"}),", like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"mandatory: True\nquestion: |\n  Hello, World!\n---\nmandatory: True\nquestion: |\n  It's a beautiful day today!\n"})}),"\n",(0,o.jsxs)(n.p,{children:['The problem is that the "Hello, World!" screen doesn\'t have a ',(0,o.jsx)(n.code,{children:"continue"})," button.\nDocassemble only displays a ",(0,o.jsx)(n.code,{children:"continue"})," button if the question sets the value of\na variable."]}),"\n",(0,o.jsxs)(n.h4,{id:"adding-an-invisible-field-to-get-docassemble-to-display-a-continue-button",children:["Adding an invisible field to get Docassemble to display a ",(0,o.jsx)(n.code,{children:"continue"})," button"]}),"\n",(0,o.jsxs)(n.p,{children:["If we want to display a ",(0,o.jsx)(n.code,{children:"continue"})," button to a screen that doesn't ask any fields,\nwe can add the ",(0,o.jsx)(n.code,{children:"continue button field"})," modifier, like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"mandatory: True\nquestion: |\n  Hello, World!\ncontinue button field: hello_screen_1\n---\nmandatory: True\nquestion: |\n  It's a beautiful day today!\n"})}),"\n",(0,o.jsxs)(n.p,{children:['The first "Hello, World!" screen will set the value of ',(0,o.jsx)(n.code,{children:"hello_screen_1"})," to ",(0,o.jsx)(n.code,{children:"True"}),"\nwhen the ",(0,o.jsx)(n.code,{children:"continue"})," button is pressed."]}),"\n",(0,o.jsxs)(n.h4,{id:"using-an-interview-order-code-block-instead",children:['Using an "interview order" ',(0,o.jsx)(n.code,{children:"code"})," block instead"]}),"\n",(0,o.jsxs)(n.p,{children:["While using more than one ",(0,o.jsx)(n.code,{children:"mandatory"})," block is fine for a short interview, it can get\nconfusing fast in a longer interview. Instead, we recommend using a single\n",(0,o.jsx)(n.code,{children:"mandatory"})," block in each interview. To do this, we can use a mandatory ",(0,o.jsx)(n.code,{children:"code"})," block\nthat mentions a variable on each screen we want to display."]}),"\n",(0,o.jsx)(n.p,{children:"We will use the name of:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["A ",(0,o.jsx)(n.code,{children:"field"})," if the question asks for a field."]}),"\n",(0,o.jsxs)(n.li,{children:["A ",(0,o.jsx)(n.code,{children:"continue button field"})," if the question is only informational and doesn't ask a question"]}),"\n",(0,o.jsxs)(n.li,{children:["An ",(0,o.jsx)(n.code,{children:"event"})," for an ending screen that doesn't have a ",(0,o.jsx)(n.code,{children:"continue"})," button"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"mandatory: True\ncomment: |\n  This is an interview order block\ncode: |\n  user_name\n  hello_screen_1\n  ending_screen\n---\nquestion: |\n  What is your name?\nfields:\n  - Your name: user_name\n---\nquestion: |\n  Hello, ${ user_name }!\ncontinue button field: hello_screen_1\n---\nevent: ending_screen\nquestion: |\n  It's a beautiful day today!\n"})}),"\n",(0,o.jsx)(n.h4,{id:"learn-more",children:"Learn more"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"/legal-tech-class/docs/practical-guide-docassemble/controlling-interview-order",children:"Read more about controlling interview order"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"your-assignment",children:"Your assignment"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Modify your Hello, World exercise so that it uses three different question types. You can use the ",(0,o.jsx)(n.code,{children:"continue button field"}),' modifier if you want to display the "Hello, World" question first.']}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Sam Harden, June 2020"})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>a});var o=s(7294);const t={},i=o.createContext(t);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);